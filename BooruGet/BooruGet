#!/bin/python3
"""
Frank Hrach
BooruGet
"""


import argparse
import threading
import os
import time

import DownloadManager
from arguments import Arguments
from Gelbooru import GelbooruDownloader


# file names
CONFIG = os.path.join(".config", "BooruGet.config")
FILES = [
    os.path.join(".config", "nsfw_blacklist"), os.path.join(
        ".config", "global_blacklist"),
    os.path.join(".config", "md5_nsfw_blacklist"), os.path.join(
        ".config", "md5_global_blacklist"),
    os.path.join(".config", "md5_nsfw_whitelist"), os.path.join(
        ".config", "md5_global_whitelist"),
    os.path.join(".config", "_nsfw_md5")]

# TODO switch this to load from the config file
OUT_DIR = "src"

# file content arrays
NSFW_BLACKLIST = []
GLOBAL_BLACKLIST = []
MD5_NSFW_BLACKLIST = []
MD5_GLOBAL_BLACKLIST = []
MD5_NSFW_WHITELISTLIST = []
MD5_GLOBAL_WHITELISTLIST = []
NSFW_MD5 = []


def initDirectories():
    """
    Checks to see if the directories used by the program exist, and creates
    them if they do not
    """
    global OUT_DIR
    if not os.path.exists(OUT_DIR):
        os.mkdir(OUT_DIR)

def load_config_file():
    """
    Loads settings from the config file. Creates a blank config file if it
    does not exist already
    """
    global arguments
    global CONFIG

    if not os.path.exists(".config"):
        os.mkdir(".config")

    valid_settings = {"username": None, "apikey": None}

    # if the config file does not exist, create it
    if not os.path.exists(CONFIG):
        f = open(CONFIG, "w")
        f.write('username \n')
        f.write('apikey ')
        f.close()

    f = open(CONFIG, "r")
    try:
        for line in f:
            current = line.strip().split(" ")
            valid_settings[current[0]] = current[1]
    except:
        #this is most likely not a problem
        pass
    return valid_settings


def handleArguments(arguments):
    """
    Handles the command line arguments for the program

    arguments -> a dictionary containg any arguments from the config file

    returns -> the dictionary provided updated with the command arguments
    """

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-a", "--anysize", help="Allow any sized image. " +
        "Default is to only allow images equal to or larger than the " +
        "specified screen size", action="store_true")
    parser.add_argument(
        "-u", "--username", default=arguments["username"],
        help="The username you use to log into danbooru this overrides what " +
        "is found in the config file if specified")
    parser.add_argument(
        "-k", "--apikey", default=arguments["apikey"],
        help="Your api key can be found on your user page. This overrides " +
        "what is found in the config file if specified")
    parser.add_argument(
        "-w", "--width", help="the width of your screen in pixels", default=-1,
        type=int)
    parser.add_argument(
        "-t", "--height", help="the height of your screen in pixels",
        default=-1, type=int)
    parser.add_argument(
        "-e", "--error", help="the percentage error allowed for the image." +
        "Default is 5 percent", default=0.05, type=float)
    parser.add_argument(
        "-v", "--verbose", help="prints debug output", action="store_true")
    parser.add_argument(
        "--nsfw", help="Allow nsfw results, default is disallow",
        action="store_true")
    parser.add_argument(
        "-l", "--localonly", help="Do not download, use local files only",
        action="store_true")
    parser.add_argument(
        "--nodan", help="Do not download from danbooru", action="store_true")
    parser.add_argument(
        "--nogel", help="Do not download from gelbooru",
        action="store_true")
    parser.add_argument(
        "search", help="the string to search for. It is the exact same " +
        "string that would be entered into the site")

    return dict(list(arguments.items()) +
        list(vars(parser.parse_args()).items()))


def main():
    """
    The entry point for the program
    """
    global OUT_DIR
    try:
        arguments = load_config_file()
        arguments = handleArguments(arguments)

        args = Arguments(arguments['anysize'], arguments['height'], \
               arguments['width'], arguments['error'], arguments['verbose'], \
               arguments['nsfw'], arguments['search'], arguments['username'], \
               arguments['apikey'])


        if args.verbose:
            print("Arguments:")
            print('\n' + str(arguments))

        threads = []
        event = threading.Event()
        dl_manager = DownloadManager.DownloadManager(event, OUT_DIR)

        if not arguments['localonly']:
            threads.append(dl_manager)

            if not arguments['nogel']:
                gel = GelbooruDownloader(args, dl_manager)
                threads.append(gel)
            if not arguments['nodan']:
                #TODO write danbooru code
                pass

            # Start all threads
            print("Starting downloads")
            for thread in threads:
                thread.start()

            # remove the download thread
            threads.pop(0)

            # Wait for all threads to finish
            for thread in threads:
                print("join")
                thread.join()

            print("Main thread done")

    except (KeyboardInterrupt, SystemExit):
        dl_manager.should_run = False
        raise

# Entry Point
main()
